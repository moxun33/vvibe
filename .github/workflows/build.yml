# This is a basic workflow to help you get started with Actions

name: build

# Controls when the workflow will run
on:
  push:
    tags:
      - "v*"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # APP name
  APP_NAME: vvibe
  FVP_DEPS_LATEST: 1
  FLUTTER_VERSION: 3.27.0
  FFMPEG_DOWNLOAD_URL: https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z
  FFMPEG_VERSION: latest

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  Windows:
    permissions:
      contents: write
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          $VCINSTALLDIR = $(& "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath)
          Add-Content $env:GITHUB_ENV "LIBCLANG_PATH=${VCINSTALLDIR}\VC\Tools\LLVM\x64\bin`n"
          Invoke-WebRequest "$FFMPEG_DOWNLOAD_URL" -OutFile ffmpeg-release-full-shared.7z
          7z x ffmpeg-release-full-shared.7z
          mkdir ffmpeg
          mv ffmpeg-*/* ffmpeg/
          Add-Content $env:GITHUB_ENV "FFMPEG_DIR=${pwd}\ffmpeg`n"
          Add-Content $env:GITHUB_PATH "${pwd}\ffmpeg\bin`n"

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy
      - name: Copy ffmpeg dll to cargo dir
        run: |
          cp ffmpeg/bin/*.dll C:\Users\runneradmin\.cargo\bin

      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: $FLUTER_VERSION
          cache: true

      - name: Build
        run: |
          flutter config --enable-windows-desktop
          flutter pub get
          flutter build windows --verbose

      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: "zip"
          filename: vvibe-${{github.ref_name}}-windows-x64.zip
          directory: build/windows/x64/runner/Release

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{github.ref_name}}
          draft: true
          prerelease: true
          token: ${{ secrets.GH_TOKEN }}
          files: |
            build/windows/x64/runner/Release/vvibe-${{github.ref_name}}-windows-x64.zip

      - name: Upload Release Asset
        uses: actions/upload-artifact@v3
        with:
          name: vvibe-${{github.ref_name}}-windows-x64.zip
          path: build/windows/x64/runner/Release/vvibe-${{github.ref_name}}-windows-x64.zip
  Linux:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: subosito/flutter-action@v2
      with:
        channel: "stable"
        flutter-version: $FLUTER_VERSION
        cache: true
    - run: |
       sudo apt-get update -y
       sudo apt-get install -y cmake clang ninja-build libgtk-3-dev libpulse-dev liblzma-dev  libstdc++-12-dev
    - run: flutter config --enable-linux-desktop
    - run: flutter doctor --verbose
    - run: flutter pub get
    - run: flutter build linux --verbose
    - run: mv build/linux/x64/release/bundle .
    - run: cmake -E tar Jcvf vvibe-${{github.ref_name}}-linux-x64.tar.xz bundle

    - name: Archive Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{github.ref_name}}
        draft: true
        prerelease: true
        token: ${{ secrets.GH_TOKEN }}
        files: |
          vvibe-${{github.ref_name}}-linux-x64.tar.xz

    - name: Upload Release Asset
      uses: actions/upload-artifact@v3
      with:
        name: vvibe-${{github.ref_name}}-linux-x64.tar.xz
        path: vvibe-${{github.ref_name}}-linux*.tar.xz


